{"version":3,"sources":["components/CreateOnePet.jsx","components/EditOnePet.jsx","components/OnePetDetails.jsx","components/ShowAllPets.jsx","App.js","reportWebVitals.js","index.js"],"names":["CreateOnePet","history","useHistory","useState","name","type","description","firstSkill","secondSkill","thirdSkill","formInfo","setFormInfo","formErrors","setFormErrors","changeHandler","e","console","log","target","value","className","onSubmit","preventDefault","axios","post","then","response","data","err","errors","push","catch","htmlFor","onChange","id","message","EditOnePet","petId","useParams","useEffect","get","res","results","put","OnePetDetails","petInfo","setPetInfo","count","setCount","onClick","delete","ShowAllPets","allPets","setAllPets","deleteToggle","to","scope","map","pet","i","_id","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e383362.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios'\n// import { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst CreateOnePet = () => {\n    const history = useHistory() //using history to that we can redirect to \"/\" when the form submits\n    const [formInfo, setFormInfo] = useState({\n        name: \"\",\n        type: \"\",\n        description: \"\",\n        firstSkill: \"\",\n        secondSkill: \"\",\n        thirdSkill: \"\"\n    })\n    // include the variable which has the validation in the model file\n    const [formErrors, setFormErrors] = useState({\n        name: \"\",\n        type: \"\",\n        description: \"\",\n    })\n\n    //changehandler to update the formInfo object with the information from the form as the form is being changed\n    const changeHandler = (e) => {\n        console.log(\"changinn the form!\")\n        setFormInfo({\n            ...formInfo,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //submithandler for when the form submits we send this date to backend to create something new\n    const submitHandler = (e) => {\n        e.preventDefault()\n        axios.post(\"http://localhost:8000/api/pets\", formInfo)\n            .then(response => {\n                console.log(\"response after \", response)\n\n                if (response.data.err) { //if the form is not filled out properly and there are validation errors, collect the validations errors and put them in a state variable using setFormErrors\n                    setFormErrors(response.data.err.errors)\n                } else {\n                    //this is to clear out the form upon form submission\n                    setFormInfo({\n                        name: \"\",\n                        type: \"\",\n                        description: \"\",\n                        firstSkill: \"\",\n                        secondSkill: \"\",\n                        thirdSkill: \"\"\n                    })\n                    //if theres any existing previous error messages, clear them out too\n                    setFormErrors({\n                        name: \"\",\n                        type: \"\",\n                        description: \"\",\n                    })\n\n                    //redirect to \"/\" after creating a player\n                    history.push(\"/\")\n\n                }\n\n            })\n            .catch(err => console.log(\"error submitting the post request-->\", err))\n\n    }\n    return (\n        <div>\n            <h4 className=\"text-center mt-5\">Know a Pet Needing a Home?</h4>\n            <form onSubmit={submitHandler}>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Name:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"name\" id=\"\" className=\"form-control\" value={formInfo.name} />\n                    <p className=\"text-danger\">{formErrors.name?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Type:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"type\" id=\"\" className=\"form-control\" value={formInfo.type} />\n                    <p className=\"text-danger\">{formErrors.type?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Description:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"description\" id=\"\" className=\"form-control\" value={formInfo.description} />\n                    <p className=\"text-danger\">{formErrors.description?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 1:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"firstSkill\" id=\"\" className=\"form-control\" value={formInfo.firstSkill} />\n                    \n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 2:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"secondSkill\" id=\"\" className=\"form-control\" value={formInfo.secondSkill} />\n                    \n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 3:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"thirdSkill\" id=\"\" className=\"form-control\" value={formInfo.thirdSkill} />\n                    \n                </div>\n                <div className=\"text-center\"><input type=\"submit\" value=\"Add Pet\" className=\"btn btn-primary mt-3\" /></div>\n\n            </form>\n        </div>\n    );\n};\n\nexport default CreateOnePet;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport { useParams } from \"react-router\";\n// import { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst EditOnePet = () => {\n    const { petId } = useParams();\n    const history = useHistory() //using history to that we can redirect to \"/\" when the form submits\n    const [formInfo, setFormInfo] = useState({\n        name: \"\",\n        type: \"\",\n        description: \"\",\n        firstSkill: \"\",\n        secondSkill: \"\",\n        thirdSkill: \"\"\n    })\n    // include the variable which has the validation in the model file\n    const [formErrors, setFormErrors] = useState({\n        name: \"\",\n        type: \"\",\n        description: \"\",\n    })\n    useEffect(()=>{\n        axios.get(`http://localhost:8000/api/pets/${petId}`)\n            .then(res=>{\n                console.log(\"response when trying to get one pets-->\", res)\n                setFormInfo(res.data.results)\n                setFormErrors(res.data.err.errors)\n            })\n            .catch(err=>console.log(\"errrrr when getting the pets \", err))\n    },[])\n\n    //changehandler to update the formInfo object with the information from the form as the form is being changed\n    const changeHandler = (e) => {\n        console.log(\"changinn the form!\")\n        setFormInfo({\n            ...formInfo,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //submithandler for when the form submits we send this date to backend to create something new\n    const submitHandler = (e) => {\n        e.preventDefault()\n        axios.put(`http://localhost:8000/api/pets/${petId}`, formInfo)\n            .then(response => {\n                console.log(\"response after \", response)\n\n                if (response.data.err) { //if the form is not filled out properly and there are validation errors, collect the validations errors and put them in a state variable using setFormErrors\n                    setFormErrors(response.data.err.errors)\n                } else {\n                    //this is to clear out the form upon form submission\n                    setFormInfo({\n                        name: \"\",\n                        type: \"\",\n                        description: \"\",\n                        firstSkill: \"\",\n                        secondSkill: \"\",\n                        thirdSkill: \"\"\n                    })\n                    //if theres any existing previous error messages, clear them out too\n                    setFormErrors({\n                        name: \"\",\n                        type: \"\",\n                        description: \"\",\n                    })\n\n                    //redirect to \"/\" after creating a player\n                    history.push(\"/\")\n\n                }\n\n            })\n            .catch(err => console.log(\"error submitting the post request-->\", err))\n\n    }\n    return (\n        <div>\n            <h2 className=\"mt-2 text-center mt-3\">Edit : <span className=\"text-primary\">{formInfo.name}</span></h2>\n            <form onSubmit={submitHandler}>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Name:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"name\" id=\"\" className=\"form-control\" value={formInfo.name} />\n                    <p className=\"text-danger\">{formErrors.name?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Type:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"type\" id=\"\" className=\"form-control\" value={formInfo.type} />\n                    <p className=\"text-danger\">{formErrors.type?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Pet Description:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"description\" id=\"\" className=\"form-control\" value={formInfo.description} />\n                    <p className=\"text-danger\">{formErrors.description?.message}</p>\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 1:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"firstSkill\" id=\"\" className=\"form-control\" value={formInfo.firstSkill} />\n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 2:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"secondSkill\" id=\"\" className=\"form-control\" value={formInfo.secondSkill} />\n                    \n                </div>\n                <div className=\"form-group col-lg-6 offset-lg-3\">\n                    <label htmlFor=\"\">Skill 3:</label>\n                    <input onChange={changeHandler} type=\"text\" name=\"thirdSkill\" id=\"\" className=\"form-control\" value={formInfo.thirdSkill} />\n                </div>\n                <div className=\"text-center\"><input type=\"submit\" value=\"Edit Pet\" className=\"btn btn-primary mt-3\" /></div>\n\n            </form>\n        </div>\n    );\n};\n\nexport default EditOnePet;","import React, {useState, useEffect} from 'react';\nimport { useParams } from \"react-router\";\nimport axios from 'axios'\nimport { useHistory } from \"react-router-dom\";\n\nconst OnePetDetails = () => {\n    const { petId } = useParams(); //get the id of the pet from the route and put it in a variable\n    const history = useHistory(); //so we can redirect after clicking on delete\n\n    const [petInfo, setPetInfo] = useState({}) //a state variable to store information about the pet that we get back from the api\n    const [count, setCount] = useState(0)\n\n    //as soon as the pet Detail component renders, make an api call to get one pet by id, and store that pet info in a state variable without infinitely re-rendering this component\n    useEffect(()=>{\n        axios.get(`http://localhost:8000/api/pets/${petId}`)\n            .then(response=>{\n                console.log(\"response when getting ONE pet-->\", response)\n                setPetInfo(response.data.results)\n            })\n            .catch(err=> console.log(err))\n\n    },[])\n\n\n    const deletePet = ()=>{\n        console.log(\"deleting pet that has this id-->\", petId)\n        axios.delete(`http://localhost:8000/api/pets/delete/${petId}`) //make an axios call to our backend route to delete pet by id. we have this id available from the route parameter\n            .then(response=>{\n                console.log(\"response after deleting->\",response)\n                history.push(\"/\") //redirect to \"/\" after deleting the pet\n\n            })\n            .catch(err=>console.log(err))\n    }\n    const increaseCount = ()=>{\n        console.log(\"increasing count\")\n        setCount(count + 1)\n    }\n\n\n    return (\n        <div>\n            <div className=\"d-flex justify-content-between col-lg-6 offset-lg-3 mt-5\">\n                <h2 className=\"mt-2\">Details about: <span className=\"text-primary\">{petInfo.name}</span></h2>\n                <div className=\"text-center m-3\"><button onClick= {deletePet} className=\"btn btn-danger\">Adopt {petInfo.name}! </button></div>\n            </div>\n            <div className=\"border border-dark container mt-4 col-lg-6 offset-lg-3\">\n                <h4 className=\"text-dark m-2 p-2 \">Pet Type: <br /> <span className=\"text-primary p-2 m-2\">{petInfo.type}</span></h4>\n                <h4 className=\"text-dark m-2 p-2\">Skills: <br /><span className=\"text-primary p-2 m-2\">{petInfo.firstSkill}</span> <br /><span className=\"text-primary p-2 m-2\">{petInfo.secondSkill}</span> <br /><span className=\"text-primary p-2 m-2\">{petInfo.thirdSkill}</span></h4>\n\n\n                <div className=\"d-flex justify-content-between col-lg-6 offset-lg-3 mt-5\">\n                <button onClick= {increaseCount} className=\"btn btn-success m-3\">Like {petInfo.name}! </button>\n\n                <p className=\"mt-4\"> <span>{count} </span> like(s)</p>\n                \n                </div>\n                \n            </div>\n\n            \n        </div>\n    );\n};\n\n\nexport default OnePetDetails;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport { Link } from \"react-router-dom\";\n\n\nconst ShowAllPets = () => {\n\n    const [allPets, setAllPets] = useState([])\n\n    const [deleteToggle, setDeleteToggle] = useState(false)\n\n    useEffect(() => {\n        axios.get(\"http://localhost:8000/api/pets\")\n            .then(res => {\n                console.log(\"response when getting all pets-->\", res)\n                setAllPets(res.data.results)\n            })\n            .catch(err => console.log(\"Error while getting all pets!\", err))\n\n    }, [deleteToggle])\n\n    const deletePet = (petId) => {\n        console.log(\"Here is the \", petId)\n        axios.delete(`http://localhost:8000/api/pets/delete/${petId}`)\n            .then(res => {\n                console.log(\"response after axios delete-->\", res)\n                setDeleteToggle(!deleteToggle)\n            })\n            .catch(err => console.log(\"errrrrr when deleting from homePage-->\", err))\n    }\n\n\n    \n    return (\n        <div className=\"mt-4\">\n            <h2 className=\"\">\n                <Link to=\"/pets/new\">Add Pet to the Shelter</Link>\n            </h2>\n            <h2 className=\"text-danger text-center\"> These pets are looking for a good home!</h2>\n            <table className=\"table\">\n\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\"><h2>Name</h2></th>\n                        <th scope=\"col\"><h2>Type</h2></th>\n                        <th scope=\"col\" className=\"h2\">Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        allPets.map((pet, i) => {\n                            return (\n                                <tr className=\"text-success\">\n                                    <td><h3>{pet.name}</h3></td>\n                                    <td><h3>{pet.type}</h3></td>\n                                    <td><Link to={`/show/pets/${pet._id}`} className=\"btn btn-primary\">details</Link> <Link to={`/${pet._id}/edit`} className=\"btn btn-success\">edit</Link></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\n\nexport default ShowAllPets;","import React, { useState } from 'react';\nimport './App.css';\nimport CreateOnePet from './components/CreateOnePet';\nimport EditOnePet from './components/EditOnePet'\nimport OnePetDetails from './components/OnePetDetails'\nimport ShowAllPets from './components/ShowAllPets'\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <BrowserRouter>\n        <div className=\"container\">\n          <h2 className=\"text-center text-dark bg-success mt-3\">Welcome to the Pet Shelter!</h2>\n\n        </div>\n        <Route exact path=\"/\">\n\n          <ShowAllPets></ShowAllPets>\n        </Route>\n        <Route exact path=\"/pets/new\">\n          <h2 className=\"float-end m-3\">\n            <Link to=\"/\" className=\"btn btn-primary mt-3 \">Home</Link>\n          </h2>\n          <CreateOnePet></CreateOnePet>\n        </Route>\n        <Route exact path=\"/show/pets/:petId\">\n          <h2 className=\"float-end\">\n            <Link to=\"/\" className=\"btn btn-primary mt-3 \">Home</Link>\n          </h2>\n          <OnePetDetails></OnePetDetails>\n        </Route>\n        <Route exact path=\"/:petId/edit\">\n          <h2 className=\"float-end\">\n            <Link to=\"/\" className=\"btn btn-primary mt-3 \">Home</Link>\n          </h2>\n          <EditOnePet></EditOnePet>\n        </Route>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}